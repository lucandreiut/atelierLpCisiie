#!/usr/bin/env php
<?php

require __DIR__ .'/vendor/autoload.php';
require __DIR__ .'/config/database.php';

use Illuminate\Database\Capsule\Manager as Capsule;
use Cartalyst\Sentinel\Native\Facades\Sentinel;

class Migrator {
	
    /**
     * migrate the database schema
     */
    public function migrate() {
        /**
         * create table for sentinel user
         */
        if (!Capsule::schema()->hasTable('users')) {
            Capsule::schema()->create('users', function($table)
            {

                $table->integer('id', true);
                $table->string('name')->default('');
                $table->string('email');
                $table->string('password');
                $table->timestamp('updated_at')->default(Capsule::raw('CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP'));
                $table->timestamp('created_at')->default(Capsule::raw('CURRENT_TIMESTAMP'));
                $table->timestamp('last_login')->default(Capsule::raw('CURRENT_TIMESTAMP'));

                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';
            });
        }

        /**
         * create table for lists
         */
        if (!Capsule::schema()->hasTable('list')) {
            Capsule::schema()->create('list', function($table)
            {
                $table->integer('id', true);
                $table->string('title');
                $table->string('description');
                $table->dateTime('limit_date');
                $table->boolean('is_self_target');
                $table->string('receiver');
                $table->string('sharing_url');
                //FK
                $table->integer('users_id');

                $table->engine = 'InnoDB';

                //Foreign keys declaration
                $table->foreign('users_id')->references('id')->on('users')->onDelete('cascade');
            });
        }

        /**
         * create table for global messages
         */
        if (!Capsule::schema()->hasTable('global_message')) {
            Capsule::schema()->create('global_message', function($table)
            {
                $table->integer('id', true);
                $table->string('name');
                $table->text('message');
                $table->timestamp('date');
                //FK
                $table->integer('lists_id');

                $table->engine = 'InnoDB';

                //Foreign keys declaration
                $table->foreign('lists_id')->references('id')->on('list')->onDelete('cascade');
            });
        }
		
		/**
         * create table for groups
         */
        if (!Capsule::schema()->hasTable('group')) {
            Capsule::schema()->create('group', function($table)
            {
                $table->integer('id', true);
                $table->string('title');
                $table->double('total_price');
                $table->boolean('is_crowdfundable');
                $table->double('current_contribution')->default(0);
                $table->boolean('is_reserved');
                $table->integer('lists_id');

                $table->engine = 'InnoDB';

                //Foreign keys declaration
                $table->foreign('lists_id')->references('id')->on('list')->onDelete('cascade');
            });
        }

        /**
         * create table for items
         */
        if (!Capsule::schema()->hasTable('item')) {
            Capsule::schema()->create('item', function($table)
            {
                $table->integer('id', true);
                $table->string('title');
                $table->string('description');
                $table->double('price');
                $table->string('url');
                $table->boolean('is_crowdfundable');
                $table->double('current_contribution')->default(0);
                $table->boolean('is_reserved')->default(0);
                //FK
                $table->integer('group_id')->nullable();
                //FK
                $table->integer('lists_id')->nullable();

                $table->engine = 'InnoDB';

                //Foreign keys declaration
                $table->foreign('group_id')->references('id')->on('group')->onDelete('cascade');
                $table->foreign('lists_id')->references('id')->on('list')->onDelete('cascade');
                
            });
        }

        /**
         * create table for item images
         */
        if (!Capsule::schema()->hasTable('image')) {
            Capsule::schema()->create('image', function($table)
            {
                $table->integer('id', true);
                $table->string('url');
                //FK
                $table->integer('item_id')->nullable();

                $table->engine = 'InnoDB';

                //Foreign keys declaration
                $table->foreign('item_id')->references('id')->on('item')->onDelete('cascade');


            });
        }
        
        /**
         * create table for contributors
         */
        if (!Capsule::schema()->hasTable('contributor')) {
            Capsule::schema()->create('contributor', function($table)
            {
                $table->integer('id', true);
                $table->string('name');
                $table->text('message')->nullable();
                $table->timestamp('contribution_date');
                //FK
                $table->integer('group_id')->nullable();
                //FK
                $table->integer('item_id')->nullable();

                $table->engine = 'InnoDB';

                //Foreign keys declaration
                $table->foreign('group_id')->references('id')->on('group')->onDelete('cascade');
                $table->foreign('item_id')->references('id')->on('item')->onDelete('cascade');


            });
        }

        if (!Capsule::schema()->hasTable('activations')) {
            Capsule::schema()->create('activations', function($table)
            {
                $table->increments('id');
                $table->integer('user_id');
                $table->string('code')->nullable();
                $table->tinyInteger('completed')->default(0);
                $table->timestamp('completed_at')->nullable();
                $table->timestamps();
                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';
                $table->unique('user_id');
            });
        }
        /**
         * create persistences table
         */
        if (!Capsule::schema()->hasTable('persistences')) {
            Capsule::schema()->create('persistences', function($table)
            {
				$table->increments('id');
                $table->integer('user_id');
                $table->string('code');
                $table->timestamps();
                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';
				$table->unique('code');
            });
        }
		
		/**
         * create reminders table
         */
        if (!Capsule::schema()->hasTable('reminders')) {
            Capsule::schema()->create('reminders', function($table)
            {
				$table->increments('id');
                $table->integer('user_id');
                $table->string('code');
                $table->tinyInteger('completed')->default(0);
                $table->timestamp('completed_at');
                $table->timestamps();
                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';
            });
        }
		
		/**
         * create roles table
         */
        if (!Capsule::schema()->hasTable('roles')) {
            Capsule::schema()->create('roles', function($table)
            {
				$table->increments('id');
                $table->string('slug');
                $table->string('name');
                $table->text('permissions');
                $table->timestamps();
                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';
				$table->unique('slug');
            });
        }
		
		/**
         * create role_users table
         */
        if (!Capsule::schema()->hasTable('role_users')) {
            Capsule::schema()->create('role_users', function($table)
            {
				$table->integer('user_id');
                $table->integer('role_id');
                $table->timestamps();
                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';
                $table->primary(array('user_id', 'role_id'));
            });
        }
        /**
         * create throttle table
         */
        if (!Capsule::schema()->hasTable('throttle')) {
            Capsule::schema()->create('throttle', function($table)
            {
                $table->increments('id');
                $table->integer('user_id')->unsigned();
                $table->string('type');
                $table->string('ip')->nullable();
                $table->timestamps();
                // We'll need to ensure that MySQL uses the InnoDB engine to
                // support the indexes, other engines aren't affected.
                $table->engine = 'InnoDB';
                $table->unique('user_id');
            });
        }

    }

    /**
     * seed the database with initial value
     */
    public function seed() {
        try {
           $credentials = [
                'name' => 'Admin',
				'email'    => 'admin@mecado.fr',
				'password' => 'admin'
			];

			$user = Sentinel::registerAndActivate($credentials);
			
        } catch(Exception $e) {
            echo $e->getMessage()."\n";
        }
    }
}

$migrator = new Migrator();

$migrator->migrate();
$migrator->seed();

print("Migration Successfully");